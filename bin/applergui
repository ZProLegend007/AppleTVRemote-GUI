#!/usr/bin/env python3

import sys
import os
import traceback

# Add current directory to Python path
applergui_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, applergui_dir)

def check_dependencies():
    """Check for required dependencies"""
    missing_deps = []
    
    try:
        import PyQt6
    except ImportError:
        missing_deps.append("PyQt6>=6.4.0")
    
    try:
        import qasync
    except ImportError:
        missing_deps.append("qasync>=0.24.1")
    
    try:
        import pyatv
    except ImportError:
        missing_deps.append("pyatv>=0.14.0")
    
    try:
        import aiohttp
    except ImportError:
        missing_deps.append("aiohttp>=3.8.0")
    
    # keyring is optional but recommended
    try:
        import keyring
    except ImportError:
        print("‚ö†Ô∏è  Warning: keyring not available, using file-based credential storage")
    
    if missing_deps:
        print("‚ùå Missing required dependencies:")
        for dep in missing_deps:
            print(f"   - {dep}")
        print("\nüí° Install missing packages with:")
        print(f"   pip3 install --user {' '.join(missing_deps)}")
        print("\nüîß Or run the full installation:")
        print("   ./install.sh")
        return False
    
    return True

def main():
    """Main application entry point with comprehensive error handling"""
    
    # Handle debug mode
    debug_mode = "--debug" in sys.argv
    
    if debug_mode:
        print("üêõ Launching ApplerGUI in debug mode...")
        print("üìä Checking dependencies...")
    
    # Check dependencies first
    if not check_dependencies():
        sys.exit(1)
    
    try:
        import qasync
        import asyncio
        from PyQt6.QtWidgets import QApplication
        from ui.main_window import MainWindow
        from backend.config_manager import ConfigManager
        from backend.device_controller import DeviceController
        from backend.pairing_manager import PairingManager
        
        # Suppress Qt verbose logging for clean output
        os.environ['QT_LOGGING_RULES'] = (
            'qt.text.font.*=false;'
            'qt.widgets.*=false;'
            'qt.core.*=false;'
            'qt.qpa.*=false;'
            'qt.accessibility.*=false'
        )
        
        if debug_mode:
            print("‚úì All imports successful")
        
        print("üçé Launching ApplerGUI with Apple TV support...")
        
        app = QApplication(sys.argv)
        
        # Setup async event loop integration
        loop = qasync.QEventLoop(app)
        asyncio.set_event_loop(loop)
        
        if debug_mode:
            print("‚úì Async event loop initialized")
        
        # Setup backend components
        config_manager = ConfigManager()
        device_controller = DeviceController(config_manager)
        pairing_manager = PairingManager(config_manager)
        
        if debug_mode:
            print("‚úì Backend components initialized")
        
        # Create main window
        window = MainWindow(config_manager, device_controller, pairing_manager)
        window.show()
        
        print("‚úÖ ApplerGUI launched successfully with Apple TV support")
        
        # Run with async support
        with loop:
            loop.run_until_complete(app.exec())
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        print("üí° Please install missing packages with: pip install -r requirements.txt")
        if debug_mode:
            traceback.print_exc()
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Launch failed: {e}")
        if debug_mode:
            print("\nüìä Full traceback:")
            traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()